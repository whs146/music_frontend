import React, { useEffect, createContext, useContext, useState, useMemo } from 'react';

var MUST_BE_WRAPPED_MESSAGE = "Component must be wrapped with WebPlaybackSDK.";
var SPOTIFY_WEB_PLAYBACK_SDK_URL = "https://sdk.scdn.co/spotify-player.js";

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function useEffectTimeout(effect, deps, timeout) {
  if (timeout === void 0) {
    timeout = 1000;
  }

  useEffect(function () {
    var timeoutId = setTimeout(effect, timeout);
    return function () {
      return clearTimeout(timeoutId);
    };
  }, deps);
}

var WebPlaybackSDKReadyContext = createContext(undefined);
var WebPlaybackSDKReadyProvider = function WebPlaybackSDKReadyProvider(_ref) {
  var children = _ref.children;

  var _useState = useState(false),
      webPlaybackSDKReady = _useState[0],
      setWebPlaybackSDKReady = _useState[1];

  useEffect(function () {
    window.onSpotifyWebPlaybackSDKReady = function () {
      setWebPlaybackSDKReady(true);
    };
  }, []);
  return React.createElement(WebPlaybackSDKReadyContext.Provider, {
    value: webPlaybackSDKReady
  }, children);
};
function useWebPlaybackSDKReady() {
  var value = useContext(WebPlaybackSDKReadyContext);
  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
  return value;
}

var PlayerContext = createContext(undefined);
var SpotifyPlayerProvider = function SpotifyPlayerProvider(_ref) {
  var children = _ref.children,
      deviceName = _ref.deviceName,
      getOAuthToken = _ref.getOAuthToken,
      volume = _ref.volume,
      connectOnInitialized = _ref.connectOnInitialized;

  var _useState = useState(null),
      player = _useState[0],
      setPlayer = _useState[1];

  var webPlaybackSDKReady = useWebPlaybackSDKReady(); // create Spotify.Player instance.

  useEffect(function () {
    if (webPlaybackSDKReady) {
      var _player = new Spotify.Player({
        name: deviceName,
        getOAuthToken: getOAuthToken,
        volume: volume
      });

      setPlayer(_player);

      if (connectOnInitialized) {
        _player.connect();
      }

      return function () {
        return _player.disconnect();
      };
    }
  }, // `deviceName` and `volume` are intentionally not passed.
  // When they are changed, they will be applied with the following useUpdateEffect.
  [getOAuthToken, connectOnInitialized, webPlaybackSDKReady]); // The first effect is ignored.
  // Because the first `deviceName` will be passed to Spotify.Player constructor.

  useEffectTimeout(function () {
    player == null ? void 0 : player.setName(deviceName);
  }, [deviceName]); // The first effect is ignored.
  // Because the first `volume` will be passed to Spotify.Player constructor.

  useEffect(function () {
    volume !== undefined && (player == null ? void 0 : player.setVolume(volume));
  }, [volume]);
  return React.createElement(PlayerContext.Provider, {
    value: player,
    children: children
  });
};
function useSpotifyPlayer() {
  var value = useContext(PlayerContext);
  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
  var player = useMemo(function () {
    if (value === null) return null;
    return {
      connect: function connect() {
        return value.connect();
      },
      disconnect: function disconnect() {
        return value.disconnect();
      },
      getCurrentState: function getCurrentState() {
        return value.getCurrentState();
      },
      nextTrack: function nextTrack() {
        return value.nextTrack();
      },
      pause: function pause() {
        return value.pause();
      },
      previousTrack: function previousTrack() {
        return value.previousTrack();
      },
      resume: function resume() {
        return value.resume();
      },
      seek: function seek(pos_ms) {
        return value.seek(pos_ms);
      },
      togglePlay: function togglePlay() {
        return value.togglePlay();
      }
    };
  }, [value]);
  return player;
}
function useSpotifyPlayerRawInstance() {
  var value = useContext(PlayerContext);
  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
  return value;
}

var DeviceContext = createContext(undefined);
var DeviceProvider = function DeviceProvider(_ref) {
  var children = _ref.children;

  var _useState = useState(null),
      device = _useState[0],
      setDevice = _useState[1];

  var player = useSpotifyPlayerRawInstance();
  useEffect(function () {
    if (player === null) return;

    var ready = function ready(device) {
      setDevice(_extends({}, device, {
        status: "ready"
      }));
    };

    var notReady = function notReady(device) {
      setDevice(_extends({}, device, {
        status: "not_ready"
      }));
    };

    player.addListener("ready", ready);
    player.addListener("not_ready", notReady);
    return function () {
      player.removeListener("ready", ready);
      player.removeListener("not_ready", notReady);
    };
  }, [player]);
  return React.createElement(DeviceContext.Provider, {
    value: device,
    children: children
  });
};
function usePlayerDevice() {
  var value = useContext(DeviceContext);
  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
  return value;
}

var ErrorStateContext = createContext(undefined);
var ErrorStateProvider = function ErrorStateProvider(_ref) {
  var children = _ref.children;

  var _useState = useState(null),
      errorState = _useState[0],
      setErrorState = _useState[1];

  var player = useSpotifyPlayerRawInstance();
  useEffect(function () {
    if (player === null) return;

    var onInitializationError = function onInitializationError(error) {
      setErrorState(_extends({}, error, {
        type: "initialization_error"
      }));
    };

    var onAuthenticationError = function onAuthenticationError(error) {
      setErrorState(_extends({}, error, {
        type: "authentication_error"
      }));
    };

    var onAccountError = function onAccountError(error) {
      setErrorState(_extends({}, error, {
        type: "account_error"
      }));
    };

    var onPlaybackError = function onPlaybackError(error) {
      setErrorState(_extends({}, error, {
        type: "playback_error"
      }));
    };

    player.addListener("initialization_error", onInitializationError);
    player.addListener("authentication_error", onAuthenticationError);
    player.addListener("account_error", onAccountError);
    player.addListener("playback_error", onPlaybackError);
    return function () {
      player.removeListener("initialization_error", onInitializationError);
      player.removeListener("authentication_error", onAuthenticationError);
      player.removeListener("account_error", onAccountError);
      player.removeListener("playback_error", onPlaybackError);
    };
  }, [player]);
  return React.createElement(ErrorStateContext.Provider, {
    value: errorState,
    children: children
  });
};
function useErrorState() {
  var value = useContext(ErrorStateContext);
  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
  return value;
}

var PlaybackStateContext = createContext(undefined);
var PlaybackStateProvider = function PlaybackStateProvider(_ref) {
  var children = _ref.children;

  var _useState = useState(null),
      playbackState = _useState[0],
      setPlaybackState = _useState[1];

  var player = useSpotifyPlayerRawInstance();
  useEffect(function () {
    if (player === null) return;

    var playerStateChanged = function playerStateChanged(state) {
      setPlaybackState(state);
    };

    player.addListener("player_state_changed", playerStateChanged);
    return function () {
      return player.removeListener("player_state_changed", playerStateChanged);
    };
  }, [player]);
  return React.createElement(PlaybackStateContext.Provider, {
    value: playbackState,
    children: children
  });
};
function usePlaybackState(interval, durationMS) {
  if (durationMS === void 0) {
    durationMS = 1000;
  }

  var fromContext = useContext(PlaybackStateContext);
  if (fromContext === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);

  var _useState2 = useState(fromContext),
      playbackState = _useState2[0],
      setPlaybackState = _useState2[1];

  var player = useSpotifyPlayerRawInstance();
  useEffect(function () {
    return setPlaybackState(fromContext);
  }, [fromContext]);
  var playbackStateIsNull = playbackState === null;
  useEffect(function () {
    if (!interval) return;
    if (player === null) return;
    if (playbackStateIsNull) return;
    if (playbackState.paused) return;
    var intervalId = window.setInterval(function () {
      try {
        return Promise.resolve(player.getCurrentState()).then(function (newState) {
          setPlaybackState(newState);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    }, durationMS);
    return function () {
      return window.clearInterval(intervalId);
    };
  }, [interval, player, playbackStateIsNull, playbackState == null ? void 0 : playbackState.paused, durationMS]);
  return playbackState;
}

var WebPlaybackSDK = function WebPlaybackSDK(_ref) {
  var children = _ref.children,
      deviceName = _ref.deviceName,
      getOAuthToken = _ref.getOAuthToken,
      volume = _ref.volume,
      _ref$connectOnInitial = _ref.connectOnInitialized,
      connectOnInitialized = _ref$connectOnInitial === void 0 ? true : _ref$connectOnInitial;
  useEffect(function () {
    // load Web Playback SDK.
    var script = document.createElement("script");
    script.src = SPOTIFY_WEB_PLAYBACK_SDK_URL;
    document.body.appendChild(script);
    return function () {
      document.body.removeChild(script);
    };
  }, []);
  return React.createElement(WebPlaybackSDKReadyProvider, null, React.createElement(SpotifyPlayerProvider, {
    deviceName: deviceName,
    getOAuthToken: getOAuthToken,
    volume: volume,
    connectOnInitialized: connectOnInitialized
  }, React.createElement(PlaybackStateProvider, null, React.createElement(DeviceProvider, null, React.createElement(ErrorStateProvider, null, children)))));
};

export { WebPlaybackSDK, useErrorState, usePlaybackState, usePlayerDevice, useSpotifyPlayer, useWebPlaybackSDKReady };
//# sourceMappingURL=index.module.js.map
